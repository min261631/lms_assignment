// app/main_pages/escape-room/Generator.ts

import { RoomConfig, Stage } from './StageTypes';

// Helper to escape strings for inclusion in JavaScript/HTML attributes
const escapeHtml = (unsafe: string) => unsafe.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
const escapeJs = (unsafe: string) => JSON.stringify(unsafe);
// Helper to escape newlines inside the JS string without breaking the JSON structure
const escapeNewlines = (unsafe: string) => JSON.stringify(unsafe).slice(1, -1);


// --- JavaScript Validation Logic ---
// This function must live inside the <script> tag of the generated HTML
const generateJsValidationLogic = (puzzles: Stage[]): string => {
    return `
        // Data generated by the instructor's builder
        const PUZZLES = ${escapeNewlines(JSON.stringify(puzzles))};

        // Case-insensitive, whitespace-insensitive comparison utility
        function normalize(str) {
            if (typeof str !== 'string') return '';
            return str.trim().toLowerCase().replace(/\\s+/g, ' ');
        }
        
        // --- Core Validation Logic ---
        function checkAnswer(stageIndex, input) {
            const puzzle = PUZZLES[stageIndex];
            
            // 1. Simple Answer Check (Covers Format, Debug, Custom)
            const normalizedInput = normalize(input);
            const normalizedSolution = normalize(puzzle.answer);
            
            if (normalizedInput === normalizedSolution) {
                return { success: true, message: 'SUCCESS! Lock Opened.' };
            }

            // 2. Advanced Validation Logic (Code Execution via eval)
            if (puzzle.type === 'generate-numbers' || puzzle.type === 'port-data') {
                try {
                    // Create and run the function in a local context (unsafe but required for self-contained output)
                    const userCode = input;
                    const funcName = puzzle.type === 'generate-numbers' ? 'generateSequence' : 'jsonToCsv';
                    
                    // Create an IIFE to execute the function and capture its return value
                    const executionWrapper = new Function('testInput', \`
                        // Execute user submitted code and define the function
                        \${userCode}; 
                        
                        if (typeof \${funcName} !== 'function') {
                            throw new Error('Function "\\\${funcName}\\" not found in your code. Ensure correct name and syntax.');
                        }
                        
                        let executionResult;

                        if (testInput === 'generate-numbers') {
                            // Test case: should return array 0-1000
                            executionResult = \${funcName}();
                            
                            const isCorrect = Array.isArray(executionResult) && 
                                              executionResult.length === 1001 && 
                                              executionResult[0] === 0 && 
                                              executionResult[1000] === 1000;
                                              
                            return { success: isCorrect, message: isCorrect ? 'Code Verified!' : 'Output Array is incorrect or malformed.' };

                        } else if (testInput === 'port-data') {
                            // Test case: '{"user": "exit_key"}' -> 'user,exit_key'
                            const inputStr = '{"user": "exit_key"}';
                            const expectedOutput = 'user,exit_key';
                            
                            executionResult = \${funcName}(inputStr);

                            const isCorrect = String(executionResult).trim().toLowerCase() === expectedOutput.toLowerCase();
                            return { success: isCorrect, message: isCorrect ? 'Data Porting Successful!' : 'Output string is incorrect.' };
                        }

                        return { success: false, message: 'Logic error in the puzzle type.' };
                    \`);

                    // Execute the wrapper function
                    const result = executionWrapper(puzzle.type);
                    
                    if (result && result.success !== undefined) {
                        return result;
                    }
                    
                    return { success: false, message: 'Code execution failed to return a structured result.' };

                } catch (e) {
                    return { success: false, message: 'CODE EXECUTION ERROR: ' + e.message };
                }
            }
            
            return { success: false, message: 'INCORRECT. Please check your logic or syntax.' };
        }
    `;
};


// --- Main Generator Function ---
export function generateEscapeRoomHtml(config: RoomConfig, puzzles: Stage[]): string {
    
    if (puzzles.length === 0) {
        return "Error: Cannot generate room with no stages.";
    }

    const initialJs = generateJsValidationLogic(puzzles);
    const initialTime = config.timerMinutes * 60;
    const backgroundImage = config.backgroundImage || '/images/escape-room-bg.jpg';
    
    // --- HTML STRUCTURE ---
    const html = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${escapeHtml(config.title)} - Escape Room</title>
    
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700;900&display=swap');
        body { 
            font-family: 'Inter', sans-serif; 
            margin: 0; 
            padding: 0;
            background-color: #111827;
            color: #f3f4f6;
            min-height: 100vh;
            line-height: 1.6;
            background-image: linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.8)), url(${escapeHtml(backgroundImage)});
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .container { 
            max-width: 800px; 
            width: 90%;
            background: rgba(17, 24, 39, 0.9);
            backdrop-filter: blur(5px);
            padding: 30px; 
            border-radius: 12px; 
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.5); 
            border: 1px solid #374151;
        }
        h1 { color: #60a5fa; border-bottom: 1px solid #4b5563; padding-bottom: 10px; margin-bottom: 20px; font-size: 2em; }
        .header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px; }
        .timer { font-size: 2em; font-family: monospace; color: #10b981; font-weight: bold; }
        .stage-title { font-size: 1.5em; color: #facc15; margin-bottom: 15px; }
        .question { color: #e5e7eb; margin-bottom: 15px; }
        .code-input { 
            width: 100%; 
            height: 180px; 
            padding: 15px; 
            font-family: monospace; 
            font-size: 14px; 
            border: 1px solid #4b5563; 
            border-radius: 6px; 
            background-color: #000000; 
            color: #34d399;
            resize: vertical;
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2);
        }
        .button { 
            padding: 12px 25px; 
            background-color: #3b82f6; 
            color: white; 
            border: none; 
            border-radius: 6px; 
            cursor: pointer; 
            font-weight: 600;
            transition: background-color 0.3s;
            margin-top: 15px;
        }
        .button:hover { background-color: #2563eb; }
        .feedback { 
            margin-top: 20px; 
            padding: 15px; 
            border-radius: 6px; 
            font-weight: bold; 
            text-align: center;
        }
        .success { background-color: #10b98133; color: #10b981; border: 1px solid #10b981; }
        .error { background-color: #ef444433; color: #ef4444; border: 1px solid #ef4444; }
        .win-screen { text-align: center; padding: 40px; background-color: rgba(16, 185, 129, 0.1); border: 2px solid #10b981; border-radius: 12px; }
        .image-clue { width: 100%; max-width: 300px; height: auto; cursor: pointer; border: 4px solid #facc15; border-radius: 10px; transition: transform 0.2s; }
        .image-clue:hover { transform: scale(1.05); }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 id="room-title">${escapeHtml(config.title)}</h1>
            <div class="timer" id="timer-display"></div>
        </div>
        
        <div id="game-container">
            </div>

        <div class="feedback" id="feedback"></div>
    </div>

    <script>
        ${initialJs}

        let remainingTime = ${initialTime};
        let timerInterval;
        let currentStageIndex = 0;

        const container = document.getElementById('game-container');
        const timerDisplay = document.getElementById('timer-display');
        const feedbackDisplay = document.getElementById('feedback');
        
        // --- Timer Functions ---
        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const secs = seconds % 60;
            return \`\${minutes.toString().padStart(2, '0')}:\${secs.toString().padStart(2, '0')}\`;
        }

        function startTimer() {
            if (timerInterval) clearInterval(timerInterval);
            timerInterval = setInterval(() => {
                remainingTime--;
                timerDisplay.textContent = formatTime(remainingTime);

                if (remainingTime <= 0) {
                    clearInterval(timerInterval);
                    showGameOver();
                }
            }, 1000);
        }

        // --- Stage Navigation & Rendering ---
        function renderStage(stageIndex) {
            currentStageIndex = stageIndex;
            if (currentStageIndex >= PUZZLES.length) {
                showWinScreen();
                return;
            }

            const puzzle = PUZZLES[currentStageIndex];
            
            feedbackDisplay.textContent = '';
            feedbackDisplay.className = 'feedback';
            
            let stageContent = '';
            
            if (puzzle.type === 'click-debug') {
                // Clickable Image Puzzle
                const imageSrc = puzzle.clueImage || '${backgroundImage}';
                stageContent = \`
                    <div class="stage-title">Stage \${currentStageIndex + 1}: \${escapeHtml(puzzle.title)}</div>
                    <p class="question">\${escapeHtml(puzzle.question)}</p>
                    <div style="text-align: center; margin-top: 20px;">
                        <img 
                            src="\${escapeHtml(imageSrc)}" 
                            alt="Clue Image" 
                            class="image-clue" 
                            onclick="handleDebugClick(\${currentStageIndex})"
                            onerror="this.onerror=null;this.src='https://placehold.co/300x300/4b5563/e5e7eb?text=Click+Me';"
                        >
                        <p style="margin-top: 10px; font-size: 0.8em; color: #9ca3af;">Click the image to interact!</p>
                    </div>
                \`;
            } else {
                // Code/Answer Puzzle
                stageContent = \`
                    <div class="stage-title">Stage \${currentStageIndex + 1}: \${escapeHtml(puzzle.title)}</div>
                    <p class="question">\${escapeHtml(puzzle.question)}</p>
                    <textarea id="code-input" class="code-input" placeholder="// Enter your code or solution here">\${escapeHtml(puzzle.code || '')}</textarea>
                    <button class="button" onclick="handleCodeSubmit(\${currentStageIndex})">Check Code & Unlock</button>
                \`;
            }

            container.innerHTML = stageContent;
        }

        function handleCodeSubmit(stageIndex) {
            const input = document.getElementById('code-input').value;
            const result = checkAnswer(stageIndex, input);

            if (result.success) {
                feedbackDisplay.textContent = result.message;
                feedbackDisplay.className = 'feedback success';
                setTimeout(() => {
                    renderStage(stageIndex + 1);
                }, 1000);
            } else {
                feedbackDisplay.textContent = result.message;
                feedbackDisplay.className = 'feedback error';
            }
        }

        function handleDebugClick(stageIndex) {
            const puzzle = PUZZLES[stageIndex];
            
            // Log hint to console (the "debug" part)
            const hint = puzzle.hints[0] || "No specific hint was set by the instructor.";
            console.log("DEBUG HINT:", hint);
            
            feedbackDisplay.textContent = '🔍 Clue found! Check the console (F12) for a hint. Advancing to the next lock.';
            feedbackDisplay.className = 'feedback success';
            
            // Manually advance to next stage after the click
            setTimeout(() => {
                renderStage(stageIndex + 1);
            }, 1000);
        }
        
        // --- End Screens ---
        function showWinScreen() {
            const timeUsed = ${initialTime} - remainingTime;
            clearInterval(timerInterval);
            container.innerHTML = \`
                <div class="win-screen">
                    <h2 style="color: #10b981; font-size: 3em; margin-bottom: 10px;">🎉 ESCAPE SUCCESSFUL!</h2>
                    <p style="font-size: 1.5em; color: #e5e7eb;">You solved all \${PUZZLES.length} puzzles in:</p>
                    <p style="font-size: 2.5em; font-weight: 900; color: #facc15; margin-top: 10px;">\${formatTime(timeUsed)}</p>
                    <p style="margin-top: 20px; color: #9ca3af;">You can now safely exit the page.</p>
                </div>
            \`;
        }

        function showGameOver() {
            container.innerHTML = \`
                <div class="win-screen" style="background-color: #ffeded; border: 2px solid #ef4444;">
                    <h2 style="color: #ef4444; font-size: 3em; margin-bottom: 10px;">⏰ TIME EXPIRED!</h2>
                    <p style="font-size: 1.5em; color: #721c24;">The room is locked forever. Game Over.</p>
                    <button class="button" onclick="window.location.reload()" style="background-color: #ef4444; margin-top: 20px;">Try Again</button>
                </div>
            \`;
            feedbackDisplay.textContent = '';
            feedbackDisplay.className = 'feedback';
        }

        // Start the game on page load
        window.onload = function() {
            timerDisplay.textContent = formatTime(${initialTime});
            startTimer();
            renderStage(0);
        };
    </script>
</body>
</html>
    `;

    return html.trim();
}