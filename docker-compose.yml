services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 5s
      timeout: 3s
      retries: 10

  app:
    build:
      context: .
      target: dev
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://user:password@postgres:5432/mydb?schema=public
      CORS_ORIGIN: http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
  
  # Jaeger
  jaegertracing:
    image: jaegertracing/jaeger:latest
    restart: always
    ports:
      - "16686:16686"
      - "14268"
      - "14250"

  # Zipkin
  zipkin-all-in-one:
    image: openzipkin/zipkin:latest
    restart: always
    ports:
      - "9411:9411"

  # Collector
  otel-collector:
    image: otel/opentelemetry-collector:0.67.0
    restart: always
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./observability/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "55679:55679" # zpages extension
    depends_on:
      - jaegertracing
      - zipkin-all-in-one

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./observability/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  tests:
    image: mcr.microsoft.com/playwright:v1.47.2-jammy
    working_dir: /tests
    # mount your frontend repo so tests & config are visible
    volumes:
      - ./frontend:/tests
      - ./playwright-artifacts:/tests/playwright-artifacts
    # wait until frontend is reachable, then run tests
    entrypoint: ["/bin/bash","-lc"]
    command: >
      "npx wait-on http://frontend:3000 &&
       PW_BASE_URL=http://frontend:3000
       npx playwright install --with-deps &&
       npx playwright test --reporter=html --output=playwright-artifacts"
    depends_on:
      - app

volumes:
  postgres_data:
